import{_ as s,c as a,o as e,N as t}from"./chunks/framework.4fa43063.js";const C=JSON.parse('{"title":"Typescript","description":"","frontmatter":{},"headers":[],"relativePath":"typescript.md","lastUpdated":1681258129000}'),n={name:"typescript.md"},p=t('<h1 id="typescript" tabindex="-1">Typescript <a class="header-anchor" href="#typescript" aria-label="Permalink to &quot;Typescript&quot;">​</a></h1><p><code>swr-vue</code> is written in typescript and is type safe out of the box.</p><h2 id="generics" tabindex="-1">Generics <a class="header-anchor" href="#generics" aria-label="Permalink to &quot;Generics&quot;">​</a></h2><p>To specify the type of <code>data</code> by default, it will use the return type of <code>fetcher</code> (with <code>undefined</code> for the non-ready state) as the data type, but you can also pass it as a parameter:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Specify the data type:</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// `fetchUser` is `(endpoint: string) =&gt; User`.</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useSWR</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">User</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/api/user</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fetchUser)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// Specify the error type:</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// `fetchUser` is `(endpoint: string) =&gt; User`.</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useSWR</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">User</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UserFetchError</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/api/user</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fetchUser)</span></span></code></pre></div>',5),o=[p];function l(c,r,i,y,D,d){return e(),a("div",null,o)}const A=s(n,[["render",l]]);export{C as __pageData,A as default};
