import{_ as e,c as a,o,N as t}from"./chunks/framework.4fa43063.js";const y=JSON.parse('{"title":"API Options","description":"","frontmatter":{},"headers":[],"relativePath":"options.md","lastUpdated":1681258129000}'),l={name:"options.md"},n=t('<h1 id="api-options" tabindex="-1">API Options <a class="header-anchor" href="#api-options" aria-label="Permalink to &quot;API Options&quot;">​</a></h1><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> error</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> isValidating</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> mutate </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useSWR</span><span style="color:#A6ACCD;">(key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fetcher</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options)</span></span></code></pre></div><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><ul><li><code>key</code> - A unique key for the request. Can be an <code>string | array | function | falsy value</code></li><li><code>fetcher</code> - A Promise that resolves to the data that you want to use</li><li><code>options</code> - (optional) an object of options for this SWR composable</li></ul><h2 id="return-values" tabindex="-1">Return Values <a class="header-anchor" href="#return-values" aria-label="Permalink to &quot;Return Values&quot;">​</a></h2><ul><li><code>data</code> - data for the given key resolved by fetcher (or undefined if not loaded)</li><li><code>error</code> - error thrown by fetcher (or undefined if nothing threw)</li><li><code>isValidating</code> - if there&#39;s the first request or revalidation going on</li><li><code>mutate(updateFn, options?)</code> - function to mutate the cached data. <a href="./mutation.html">More details</a></li></ul><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h2><ul><li><code>revalidateOnFocus = true</code> - Automatically revalidate when window gets focused</li><li><code>revalidateOnReconnect = true</code> - Automatically revalidate when the browser regains a network connection</li><li><code>revalidateIfStale = true</code> - Automatically revalidate if there is stale data</li><li><code>dedupingInterval = 2000</code> - dedupe requests with the same key in this time span in milliseconds</li><li><code>fallback</code> - a key-value object of multiple fallback data</li><li><code>fallbackData</code> - initial data to be returned (this has priority over <code>fallback</code> option)</li><li><code>focusThrottleInterval = 5000</code> - only revalidate on focus once during a time span in milliseconds</li><li><code>refreshInterval = 0</code> - <a href="./revalidation.html#revalidate-on-interval">(details)</a><ul><li>Disabled by default: <code>refreshInterval = 0</code></li><li>If set to a number, polling interval in milliseconds</li><li>If set to a function, the function will receive the latest data and should return the interval in milliseconds</li></ul></li><li><code>refreshWhenHidden = false</code> - polling when the window is invisible (if refreshInterval is enabled),</li><li><code>refreshWhenOffline = false</code> - polling when the browser is offline (determined by navigator.onLine),</li><li><code>onSuccess(data, key, config)</code> - callback function when a request finishes successfully</li><li><code>onError(err, key, config)</code> - callback function when a request returns an error</li></ul>',8),s=[n];function i(r,c,d,p,u,h){return o(),a("div",null,s)}const m=e(l,[["render",i]]);export{y as __pageData,m as default};
